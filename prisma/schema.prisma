generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Startup_Profile {
  user_id                  String                @id @default(cuid())
  name                     String
  entity_name              String
  sector                   String
  categories               String
  year                     Int
  brand_name               String?
  entityRegistrationStatus Boolean?
  stage                    String?
  detailsText              String?
  size                     Int
  incubation_status        Boolean
  isApproved               Boolean
  startupIndiaRegister     Boolean
  registrations            Registration_Details?
  addresses                Registered_address[]
  founders                 Founders[]
  documents                Documents?

  @@unique([user_id])
}

model Registration_Details {
  user_id         String          @unique
  reg_number      String          @unique
  reg_date        DateTime
  reg_certificate String
  gst             String
  ipr             Boolean
  startup         Startup_Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, reg_number])
}

model Registered_address {
  addr_id   Int             @default(autoincrement())
  addrLine1 String
  addLine2  String
  state     String
  city      String
  district  String
  pincode   Int
  user_id   String
  startup   Startup_Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, addr_id])
}

model Founders {
  founderid   String @id @default(cuid())
  user_id     String
  name        String
  designation String
  mobile      String
  address     String
  equity      Int
  password    String
  email       String @unique

  startup Startup_Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Documents {
  user_id         String          @id @unique
  pitch_deck      String
  Aadhar_Number   String
  Pan_Number      String
  Reg_certificate String          @unique
  Dipp_number     String          @unique
  startup         Startup_Profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Admin {
  admin_id String @id @default(cuid())
  email    String @unique
  password String
}

model Events {
  id          String   @id @default(cuid())
  name        String
  posterLink  String
  date        DateTime
  description String

  registrations Event_Registrations[]
}

model Event_Registrations {
  id      Int    @id @default(autoincrement())
  eventId String
  name    String
  number  String
  email   String

  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Program {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  icon        String // We will store the icon name or path as a string
  features    String[] // Array of strings representing features
}

model Startup {
  id          Int    @id @default(autoincrement())
  name        String
  icon        String // We will store the icon name or path as a string
  description String
  website     String
  category    String
  impact      String
  team        Int
  growth      String
}
